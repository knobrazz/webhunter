// Copyright 2025 nabar
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
    "flag"
    "fmt"
    "log"
    "github.com/knobrazz/webhunter/Go/exploit"
    "github.com/knobrazz/webhunter/Go/scanner"
    "github.com/knobrazz/webhunter/Go/hunter"
    "github.com/knobrazz/webhunter/Go/aianalyzer"
    "github.com/knobrazz/webhunter/Go/dorks"
)

func main() {
    target := flag.String("target", "", "Target URL")
    technique := flag.String("technique", "", "Exploitation technique")
    safeMode := flag.Bool("safe", true, "Enable safe mode")
    scanMode := flag.String("scan", "normal", "Scan mode (light|normal|aggressive)")
    aiMode := flag.Bool("ai", false, "Enable AI analysis")
    dorkMode := flag.Bool("dork", false, "Enable Google dorks")
    flag.Parse()

    if *target == "" {
        log.Fatal("Target URL is required")
    }

    // Initialize components
    exploiter := exploit.NewAutoExploiter(*safeMode)
    scanner := scanner.NewScanner(*scanMode)
    hunter := hunter.NewSmartHunter()
    aiAnalyzer := aianalyzer.NewAnalyzer()
    dorkScanner := dorks.NewDorkEngine()
    
    // Run components based on flags
    if *aiMode {
        if result, err := aiAnalyzer.Analyze(*target); err != nil {
            log.Printf("AI analysis error: %v", err)
        }
    }

    if *dorkMode {
        if results, err := dorkScanner.Scan(*target); err != nil {
            log.Printf("Dork scanning error: %v", err)
        }
    }

    // Run the main scan
    result, err := exploiter.RunExploit(*target, *technique)
    if err != nil {
        log.Fatalf("Exploitation failed: %v", err)
    }

    if result.Success {
        fmt.Printf("Exploitation successful!\nTechnique: %s\nPayload: %s\n", 
            result.Technique, result.Payload)
    } else {
        fmt.Println("Exploitation unsuccessful")
    }
}

